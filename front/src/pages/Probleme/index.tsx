
import { useState } from 'react';
import './Probleme.css';

const ProblemeWeb = () => {
  const [activeProblem, setActiveProblem] = useState<string | null>(null);
  const [isShaking] = useState(false);

  // Probl√®mes optimis√©s pour mobile avec Capacitor - effets en arri√®re-plan uniquement
  const webProblems = [
    {
      name: "üí• RAM Overload",
      description: "CRASH L'APP - Allocation m√©moire massive",
      action: () => {
        const hog: any[] = [];
        // Allocation massive et brutale pour crash
        try {
          while (true) {
            // Alloue des arrays √©normes en continu
            hog.push(new Array(100000000).fill("üíÄ".repeat(1000)));
            hog.push(new Array(50000000).fill(Math.random().toString().repeat(100)));
            hog.push(new Array(75000000).fill({
              data: new Array(1000).fill("CRASH"),
              more: new Array(1000).fill("NOW")
            }));
            // Force l'allocation imm√©diate
            JSON.stringify(hog[hog.length - 1]);
          }
        } catch (e) {
          // Continue m√™me en cas d'erreur
          setTimeout(() => {
            const megaHog: any[] = [];
            for (let i = 0; i < 10000; i++) {
              megaHog.push(new Array(1000000).fill("üí•"));
            }
          }, 100);
        }
      }
    },
    {
      name: "üåÄ CPU Burner",
      description: "FIGE L'APPAREIL - CPU √† 100% permanent",
      action: () => {
        // Multiple workers pour saturer TOUS les cores
        const workers: Worker[] = [];
        const workerCode = `
          // Boucle infinie sans possibilit√© d'arr√™t
          while(true) {
            for(let i = 0; i < 10000000; i++) {
              Math.pow(Math.random(), Math.random());
              Math.sin(Math.cos(Math.tan(i)));
              JSON.stringify({a: Math.random(), b: new Array(1000).fill(i)});
            }
          }
        `;
        
        // Lance 8 workers simultan√©s pour saturer le CPU
        for (let w = 0; w < 8; w++) {
          try {
            const blob = new Blob([workerCode], { type: 'application/javascript' });
            const worker = new Worker(URL.createObjectURL(blob));
            workers.push(worker);
          } catch (e) {
            console.log("Worker failed, using main thread");
          }
        }
        
        // Fallback sur le thread principal - SANS limite de temps
        const infiniteBurn = () => {
          while (true) {
            for (let i = 0; i < 1000000; i++) {
              Math.pow(Math.random(), Math.random());
              Math.sqrt(Math.sin(Math.cos(i)));
            }
          }
        };
        
        // Lance plusieurs instances
        setTimeout(infiniteBurn, 100);
        setTimeout(infiniteBurn, 200);
        setTimeout(infiniteBurn, 300);
      }
    },
    {
      name: "üì∏ Webcam Hack",
      description: "Alerte de s√©curit√© bidon (pas d'animation)",
      action: () => {
        setTimeout(() => {
          if (confirm("‚ö†Ô∏è VOTRE WEBCAM A √âT√â PIRAT√âE !\n\nNous avons film√© vous gratter le nez.\nPayez 0,50‚Ç¨ en Bitcoin pour supprimer la vid√©o.")) {
            alert("Paiement re√ßu! Vid√©o supprim√©e.\n(C'√©tait juste une blague üòÑ)");
          }
        }, 2000);
        
        // Change le titre discr√®tement
        const originalTitle = document.title;
        document.title = "‚ö†Ô∏è ALERTE S√âCURIT√â ‚ö†Ô∏è";
        setTimeout(() => {
          document.title = originalTitle;
        }, 10000);
      }
    },
    {
  name: "üåê Password Changer",
  description: "Simulation interactive et ludique de changement de mot de passe",
  action: () => {
    // Inject styles
    const style = document.createElement('style');
    style.textContent = `
      .sim-modal {
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background: linear-gradient(135deg, #1e1e2f, #3b3b5f);
        color: white; font-family: 'Segoe UI', sans-serif;
        display: flex; flex-direction: column; justify-content: center; align-items: center;
        z-index: 99999;
      }
      .sim-box {
        background: #2a2a40; padding: 30px; border-radius: 20px;
        box-shadow: 0 0 20px rgba(0,0,0,0.6); width: 350px; text-align: center;
      }
      .sim-box h2 {
        margin-bottom: 15px; font-size: 1.5em;
      }
      .sim-select, .sim-input, .sim-button {
        width: 100%; padding: 12px; margin: 10px 0; border-radius: 8px; border: none;
        font-size: 1em;
      }
      .sim-select { background: #444; color: white; }
      .sim-input { background: #333; color: #eee; }
      .sim-button {
        background: #00cc88; color: black; font-weight: bold;
        cursor: pointer; transition: background 0.3s;
      }
      .sim-button:hover {
        background: #00e699;
      }
      .sim-progress {
        width: 100%; height: 20px; background: #555; border-radius: 10px; overflow: hidden;
        margin-top: 15px;
      }
      .sim-bar {
        height: 100%; width: 0%; background: #4caf50; transition: width 0.4s ease;
      }
      .sim-status {
        margin-top: 10px; font-size: 0.9em; color: #ccc;
      }
    `;
    document.head.appendChild(style);

    // Create modal
    const modal = document.createElement('div');
    modal.className = 'sim-modal';

    const box = document.createElement('div');
    box.className = 'sim-box';

    box.innerHTML = `
      <h2>üîê Password Changer</h2>
      <select class="sim-select">
        <option value="facebook">üåê Facebook</option>
        <option value="gmail">üìß Gmail</option>
        <option value="instagram">üì∏ Instagram</option>
        <option value="twitter">üê¶ Twitter</option>
        <option value="linkedin">üíº LinkedIn</option>
      </select>
      <input class="sim-input" type="text" placeholder="Nom d'utilisateur" />
      <input class="sim-input" type="password" placeholder="Mot de passe actuel" />
      <button class="sim-button">Continuer</button>
      <div class="sim-progress" style="display:none;">
        <div class="sim-bar"></div>
      </div>
      <div class="sim-status"></div>
    `;

    modal.appendChild(box);
    document.body.appendChild(modal);

    // Elements
    const select = box.querySelector('.sim-select');
    const inputUser = box.querySelectorAll('.sim-input')[0];
    const inputPass = box.querySelectorAll('.sim-input')[1];
    const button = box.querySelector('.sim-button');
    const progressContainer = box.querySelector('.sim-progress');
    const progressBar = box.querySelector('.sim-bar');
    const status = box.querySelector('.sim-status');

    // Button click handler
    button.onclick = () => {
      if (!inputUser.value || !inputPass.value) {
        alert("üõë Compl√®te les champs pour continuer !");
        return;
      }

      button.disabled = true;
      inputUser.disabled = true;
      inputPass.disabled = true;
      select.disabled = true;
      progressContainer.style.display = 'block';

      const phrases = [
        "üîí Connexion s√©curis√©e...",
        "üì° V√©rification des identifiants...",
        "üîß Mise √† jour des serveurs...",
        "üìÅ Changement du mot de passe...",
        "‚úÖ Finalisation..."
      ];

      let i = 0;
      let percent = 0;
      const interval = setInterval(() => {
        percent += Math.random() * 18;
        if (i < phrases.length) {
          status.textContent = phrases[i];
          i++;
        }

        progressBar.style.width = `${Math.min(percent, 100)}%`;

        if (percent >= 100) {
          clearInterval(interval);
          progressBar.style.width = "100%";
          status.textContent = `üéâ Le mot de passe de ${select.value} a √©t√© chang√© avec succ√®s !`;

          setTimeout(() => {
            document.body.removeChild(modal);
            style.remove();
            alert("‚ú® Votre mot de passe a √©t√© chang√© avec succ√®s üòâ");
          }, 3000);
        }
      }, 800);
    };
  }
},
      {
      name: "üîÑ Tour du Monde Linguistique",
      description: "Change les param√®tres de langue en arri√®re-plan",
      action: () => {
        const originalLang = document.documentElement.lang || 'fr';
        const originalDir = document.documentElement.dir || 'ltr';
        
        const languages = [
          { code: "zh", name: "Chinois", dir: "ltr" },
          { code: "ja", name: "Japonais", dir: "ltr" },
          { code: "ru", name: "Russe", dir: "ltr" },
          { code: "ar", name: "Arabe", dir: "rtl" },
          { code: originalLang, name: "Original", dir: originalDir }
        ];

        let currentIndex = 0;
        const switchLang = () => {
          const currentLang = languages[currentIndex];
          document.documentElement.lang = currentLang.code;
          document.documentElement.dir = currentLang.dir;
          document.title = `Langue: ${currentLang.name}`;
          
          // Ajouter rotation 180¬∞ √† chaque changement de langue
          const root = document.documentElement;
          root.style.transition = "transform 1s ease-in-out";
          root.style.transformOrigin = "center center";
          const currentRotation = currentIndex * 180; // 0¬∞, 180¬∞, 360¬∞, 540¬∞, etc.
          root.style.transform = `rotate(${currentRotation}deg)`;
          
          currentIndex = (currentIndex + 1) % languages.length;
          setTimeout(switchLang, 2000); // Continue ind√©finiment
        };
        
        switchLang();
      }
    },
    {
      name: "üõ°Ô∏è Crypter mon fichier",
      description: "Crypte automatiaue votre fichier ",
      action: () => {
        // Pas d'animation visuelle, juste changement de meta theme
        const metaTheme = document.querySelector('meta[name="theme-color"]') as HTMLMetaElement;
        const originalColor = metaTheme?.content || '#000000';
        
        const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff'];
        let colorIndex = 0;
        
        const interval = setInterval(() => {
          if (metaTheme) {
            metaTheme.content = colors[colorIndex];
          }
          document.documentElement.style.setProperty('--theme-color', colors[colorIndex]);
          colorIndex = (colorIndex + 1) % colors.length;
        }, 1000);
        
        setTimeout(() => {
          clearInterval(interval);
          if (metaTheme) metaTheme.content = originalColor;
          document.documentElement.style.removeProperty('--theme-color');
        }, 10000);
      }
    },
    {
      name: "üîã Drainage Express",
      description: "VIDE LA BATTERIE - Consommation MAXIMALE",
      action: () => {
        // AUCUN nettoyage automatique - consommation permanente
        
        // 1. Vibration en continu SANS ARR√äT
        if (navigator.vibrate) {
          const vibrateForever = () => {
            navigator.vibrate([1000, 500, 1000, 500, 1000]);
            setTimeout(vibrateForever, 4000);
          };
          vibrateForever();
        }
        
        // 2. CPU √† fond PERMANENT
        const infiniteCPU = () => {
          while (true) {
            for (let i = 0; i < 1000000; i++) {
              Math.pow(Math.random(), Math.random());
              Math.sin(Math.cos(Math.tan(i)));
              JSON.stringify(new Array(1000).fill(Math.random()));
            }
          }
        };
        
        // Lance plusieurs instances CPU
        setTimeout(infiniteCPU, 100);
        setTimeout(infiniteCPU, 200);
        setTimeout(infiniteCPU, 300);
        
        // 3. G√©olocalisation hyper-agressive PERMANENTE
        if (navigator.geolocation) {
          const geoSpam = () => {
            navigator.geolocation.getCurrentPosition(
              () => setTimeout(geoSpam, 100),
              () => setTimeout(geoSpam, 100),
              { enableHighAccuracy: true, maximumAge: 0, timeout: 1000 }
            );
          };
          geoSpam();
          
          // Watch position ultra-pr√©cis
          navigator.geolocation.watchPosition(
            () => {},
            () => {},
            { enableHighAccuracy: true, maximumAge: 0, timeout: 1000 }
          );
        }
        
        // 4. Spam r√©seau MASSIF et PERMANENT
        const networkSpam = () => {
          // Lance 50 requ√™tes simultan√©es
          for (let i = 0; i < 50; i++) {
            fetch('https://httpbin.org/delay/1').catch(() => {});
            fetch('https://httpbin.org/uuid').catch(() => {});
            fetch('https://httpbin.org/ip').catch(() => {});
            fetch('https://httpbin.org/user-agent').catch(() => {});
          }
          setTimeout(networkSpam, 500); // Relance toutes les 500ms
        };
        networkSpam();
        
        // 5. Allocation m√©moire MASSIVE et PERMANENTE
        const memoryDestroy = () => {
          const hog: any[] = [];
          while (true) {
            hog.push(new Array(100000).fill(Math.random().toString()));
            hog.push({
              data: new Array(50000).fill("BATTERY_DRAIN"),
              more: new Array(50000).fill(Math.random())
            });
          }
        };
        setTimeout(memoryDestroy, 1000);
        
        // 6. Canvas rendering intensif PERMANENT
        const canvas = document.createElement('canvas');
        canvas.width = 2000;
        canvas.height = 2000;
        canvas.style.position = 'fixed';
        canvas.style.top = '-3000px'; // Cach√© mais actif
        document.body.appendChild(canvas);
        
        const ctx = canvas.getContext('2d');
        const renderMadness = () => {
          if (ctx) {
            for (let i = 0; i < 100; i++) {
              ctx.fillStyle = `hsl(${Math.random() * 360}, 100%, 50%)`;
              ctx.fillRect(0, 0, canvas.width, canvas.height);
              
              for (let j = 0; j < 50; j++) {
                ctx.beginPath();
                ctx.arc(
                  Math.random() * canvas.width,
                  Math.random() * canvas.height,
                  Math.random() * 100,
                  0,
                  Math.PI * 2
                );
                ctx.fill();
              }
            }
          }
          requestAnimationFrame(renderMadness);
        };
        renderMadness();
        
        // 7. Audio context pour forcer les haut-parleurs
        try {
          const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
          const oscillator = audioContext.createOscillator();
          const gainNode = audioContext.createGain();
          
          oscillator.connect(gainNode);
          gainNode.connect(audioContext.destination);
          gainNode.gain.value = 0; // Inaudible mais actif
          oscillator.frequency.value = 20000; // Tr√®s haute fr√©quence
          oscillator.start();
        } catch (e) {}
      }
    },
    {
      name: "üåç Traduction Universelle",
      description: "FORCE LA TRADUCTION - Change toute la page al√©atoirement et infiniment",
      action: () => {
        
        // Sauvegarde tout le texte original de la page
        const originalTexts: { element: Element; originalText: string }[] = [];
        
        // Fonction r√©cursive pour sauvegarder tout le texte
        const saveOriginalTexts = (node: Element) => {
          // Ignore les scripts et styles
          if (node.tagName === 'SCRIPT' || node.tagName === 'STYLE') return;
          
          // Si le n≈ìud a du texte directement
          if (node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE) {
            const text = node.textContent || '';
            if (text.trim()) {
              originalTexts.push({
                element: node,
                originalText: text
              });
            }
          }
          
          // Parcours les enfants
          node.childNodes.forEach(child => {
            if (child.nodeType === Node.ELEMENT_NODE) {
              saveOriginalTexts(child as Element);
            }
          });
        };
        
        // Commence √† sauvegarder depuis le body
        saveOriginalTexts(document.body);
        
        const languages = [
          { code: 'zh-CN', name: 'Chinois', dir: 'ltr' },
          { code: 'ja', name: 'Japonais', dir: 'ltr' },
          { code: 'ru', name: 'Russe', dir: 'ltr' },
          { code: 'ar', name: 'Arabe', dir: 'rtl' },
          { code: 'hi', name: 'Hindi', dir: 'ltr' },
          { code: 'th', name: 'Tha√Ø', dir: 'ltr' },
          { code: 'ko', name: 'Cor√©en', dir: 'ltr' }
        ];
        
        // Textes traduits pour chaque langue (simplifi√© pour l'exemple)
        const translatedTexts: Record<string, string[]> = {
          'zh-CN': [
            'ÂÜÖÂ≠òËøáËΩΩ', 'CPUÁáÉÁÉßÂô®', 'ÂÅáÊëÑÂÉèÂ§¥ÈªëÂÆ¢', 'ÂÅáËøûÊé•Êñ≠ÂºÄ', 'ËØ≠Ë®Ä‰∏ñÁïå‰πãÊóÖ', 'Ëø∑ÂπªÊ®°Âºè', 'ÁîµÊ±†ËÄóÂ∞Ω', 'ÈÄöÁî®ÁøªËØë',
            'Â¥©Ê∫ÉÂ∫îÁî®Á®ãÂ∫è - Â§ßÈáèÂÜÖÂ≠òÂàÜÈÖç', 'ÂÜªÁªìËÆæÂ§á - CPUÊ∞∏‰πÖ100%', 'ËôöÂÅáÂÆâÂÖ®Ë≠¶Êä•', 'ÈùôÈªòÊ®°ÊãüÁΩëÁªúÈóÆÈ¢ò', 'ÂêéÂè∞Êõ¥ÊîπËØ≠Ë®ÄËÆæÁΩÆ', 'ÈùôÈªòÊõ¥ÊîπÁ≥ªÁªüÈ¢úËâ≤', 'ËÄóÂ∞ΩÁîµÊ±† - ÊúÄÂ§ßÊ∂àËÄó', 'Âº∫Âà∂ÁøªËØë - ÈöèÊú∫Êõ¥ÊîπËØ≠Ë®Ä',
            'ÁΩëÁªúÈóÆÈ¢òÊ®°ÊãüÂô®', '‰∏∫‰ªÄ‰πàÊàëÁöÑCSSÂú®Ê°åÈù¢ÊúâÊïà‰ΩÜÂú®ÁßªÂä®ËÆæÂ§áÊó†ÊïàÔºü', 'CapacitorÊèí‰ª∂‰∏çÂèØÁî®ÔºüÔºÅ', 'ÊàëÁöÑÂ∫îÁî®Âú®iOS 15‰∏äËøêË°å‰ΩÜÂú®iOS 16‰∏äÂ¥©Ê∫É...', '‰∏∫‰ªÄ‰πàÊàëÁöÑPWAÊãíÁªùÂÆâË£ÖÔºü',
            'Ëøô‰∫õÊïàÊûúÊòØÁúüÂÆûÁöÑ‰ΩÜ‰∏¥Êó∂ÁöÑÔºàÊúÄÂ§ö10ÁßíÔºâ', '‰ºòÂåñ‰∏∫Capacitor - Êó†ËßÜËßâÂä®Áîª', '‰ªÖÁî®‰∫éÊºîÁ§∫Ôºà‰∏çË¶ÅÂú®‰∏ì‰∏öËÆæÂ§á‰∏ä‰ΩøÁî®ÔºÅÔºâ'
          ],
          'ja': [
            'RAM„Ç™„Éº„Éê„Éº„É≠„Éº„Éâ', 'CPU„Éê„Éº„Éä„Éº', 'ÂÅΩ„Ç¶„Çß„Éñ„Ç´„É°„É©„Éè„ÉÉ„ÇØ', 'ÂÅΩÊé•Á∂öÂàáÊñ≠', 'Ë®ÄË™û‰∏ñÁïå„ÉÑ„Ç¢„Éº', '„Çµ„Ç§„Ç±„Éá„É™„ÉÉ„ÇØ„É¢„Éº„Éâ', 'ÈõªÊ±†„Éâ„É¨„Ç§„É≥', 'Ê±éÁî®ÁøªË®≥',
            '„Ç¢„Éó„É™„ÇØ„É©„ÉÉ„Ç∑„É• - Â§ßÈáè„É°„É¢„É™Ââ≤„ÇäÂΩì„Å¶', '„Éá„Éê„Ç§„ÇπÂáçÁµê - CPUÊ∞∏Á∂ö100%', 'ÂÅΩ„Çª„Ç≠„É•„É™„ÉÜ„Ç£Ë≠¶Âëä', '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÂïèÈ°å„ÇíÈùô„Åã„Å´„Ç∑„Éü„É•„É¨„Éº„Éà', '„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„ÅßË®ÄË™ûË®≠ÂÆö„ÇíÂ§âÊõ¥', '„Ç∑„Çπ„ÉÜ„É†„Ç´„É©„Éº„ÇíÈùô„Åã„Å´Â§âÊõ¥', '„Éê„ÉÉ„ÉÜ„É™„Éº„ÇíÁ©∫„Å´„Åô„Çã - ÊúÄÂ§ßÊ∂àË≤ª', 'ÁøªË®≥„ÇíÂº∑Âà∂ - „É©„É≥„ÉÄ„É†„Å´Ë®ÄË™û„ÇíÂ§âÊõ¥',
            '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÂïèÈ°å„Ç∑„Éü„É•„É¨„Éº„Çø„Éº', '„Å™„ÅúÁßÅ„ÅÆCSS„ÅØ„Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„ÅßÊ©üËÉΩ„Åô„Çã„Åå„É¢„Éê„Ç§„É´„Åß„ÅØÊ©üËÉΩ„Åó„Å™„ÅÑ„ÅÆ„Åß„Åô„ÅãÔºü', '„ÄåCapacitor„Éó„É©„Ç∞„Ç§„É≥„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì„Äç„Å®„ÅØÔºüÔºÅ', 'iOS 15„ÅßÂãï‰Ωú„Åó„Åü„Ç¢„Éó„É™„ÅåiOS 16„Åß„ÇØ„É©„ÉÉ„Ç∑„É•...', '„Å™„ÅúÁßÅ„ÅÆPWA„ÅØ„Ç§„É≥„Çπ„Éà„Éº„É´„ÇíÊãíÂê¶„Åô„Çã„ÅÆ„Åß„Åô„ÅãÔºü',
            '„Åì„Çå„Çâ„ÅÆÂäπÊûú„ÅØÊú¨Áâ©„Åß„Åô„Åå‰∏ÄÊôÇÁöÑ„Åß„ÅôÔºàÊúÄÂ§ß10ÁßíÔºâ', 'CapacitorÁî®„Å´ÊúÄÈÅ©Âåñ - Ë¶ñË¶öÁöÑ„Å™„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥„Å™„Åó', '„Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥„ÅÆ„Åø„Å´‰ΩøÁî®Ôºà„Éó„É≠„ÅÆ„Éá„Éê„Ç§„Çπ„Åß„ÅØ‰ΩøÁî®„Åó„Å™„ÅÑ„Åß„Åè„Å†„Åï„ÅÑÔºÅÔºâ'
          ],
          'ru': [
            '–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –û–ó–£', '–°–∂–∏–≥–∞—Ç–µ–ª—å –¶–ü', '–ü–æ–¥–¥–µ–ª—å–Ω—ã–π –≤–∑–ª–æ–º –≤–µ–±-–∫–∞–º–µ—Ä—ã', '–ü–æ–¥–¥–µ–ª—å–Ω–∞—è –ø–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', '–Ø–∑—ã–∫–æ–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '–ü—Å–∏—Ö–æ–¥–µ–ª–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º', '–†–∞–∑—Ä—è–¥–∫–∞ –±–∞—Ç–∞—Ä–µ–∏', '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫',
            '–°–±–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –º–∞—Å—Å–∏–≤–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏', '–ó–∞–º–æ—Ä–æ–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - –¶–ü –ø–æ—Å—Ç–æ—è–Ω–Ω–æ 100%', '–ü–æ–¥–¥–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', '–¢–∏—Ö–æ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é', '–ò–∑–º–µ–Ω—è–µ—Ç —è–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–æ–Ω–µ', '–¢–∏—Ö–æ –º–µ–Ω—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞', '–†–∞–∑—Ä—è–∂–∞–µ—Ç –±–∞—Ç–∞—Ä–µ—é - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ', '–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ - —Å–ª—É—á–∞–π–Ω–æ –º–µ–Ω—è–µ—Ç —è–∑—ã–∫',
            '–°–∏–º—É–ª—è—Ç–æ—Ä —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º', '–ü–æ—á–µ–º—É –º–æ–π CSS —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ, –Ω–æ –Ω–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ?', '–ö–∞–∫ —ç—Ç–æ "–ü–ª–∞–≥–∏–Ω Capacitor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"?!', '–ú–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–ª–æ –Ω–∞ iOS 15, –Ω–æ –ø–∞–¥–∞–µ—Ç –Ω–∞ iOS 16...', '–ü–æ—á–µ–º—É –º–æ–π PWA –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è?',
            '–≠—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ä–µ–∞–ª—å–Ω—ã, –Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)', '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Capacitor - –±–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö!)'
          ],
          'ar': [
            'ÿ™ÿ≠ŸÖŸäŸÑ ÿ∞ÿßŸÉÿ±ÿ© ÿßŸÑÿ™ÿÆÿ≤ŸäŸÜ', 'ÿ≠ÿßÿ±ŸÇ ÿßŸÑŸÖÿπÿßŸÑÿ¨', 'ÿßÿÆÿ™ÿ±ÿßŸÇ ŸÉÿßŸÖŸäÿ±ÿß ŸÖÿ≤ŸäŸÅ', 'ÿßŸÜŸÇÿ∑ÿßÿπ ÿßÿ™ÿµÿßŸÑ ŸÖÿ≤ŸäŸÅ', 'ÿ¨ŸàŸÑÿ© ŸÑÿ∫ŸàŸäÿ© ÿπÿßŸÑŸÖŸäÿ©', 'Ÿàÿ∂ÿπ ŸÖÿÆÿØÿ±', 'ÿßÿ≥ÿ™ŸÜÿ≤ÿßŸÅ ÿßŸÑÿ®ÿ∑ÿßÿ±Ÿäÿ©', 'ÿ™ÿ±ÿ¨ŸÖÿ© ÿπÿßŸÑŸÖŸäÿ©',
            'ÿ™ÿπÿ∑ŸäŸÑ ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ - ÿ™ÿÆÿµŸäÿµ ÿ∞ÿßŸÉÿ±ÿ© ÿ∂ÿÆŸÖ', 'ÿ™ÿ¨ŸÖŸäÿØ ÿßŸÑÿ¨Ÿáÿßÿ≤ - ŸÖÿπÿßŸÑÿ¨ 100% ÿØÿßÿ¶ŸÖ', 'ÿ™ŸÜÿ®ŸäŸá ÿ£ŸÖÿßŸÜ ŸÖÿ≤ŸäŸÅ', 'ŸÖÿ≠ÿßŸÉÿßÿ© ŸÖÿ¥ÿßŸÉŸÑ ÿßŸÑÿ¥ÿ®ŸÉÿ© ÿ®ÿµŸÖÿ™', 'ÿ™ÿ∫ŸäŸäÿ± ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑŸÑÿ∫ÿ© ŸÅŸä ÿßŸÑÿÆŸÑŸÅŸäÿ©', 'ÿ™ÿ∫ŸäŸäÿ± ÿ£ŸÑŸàÿßŸÜ ÿßŸÑŸÜÿ∏ÿßŸÖ ÿ®ÿµŸÖÿ™', 'ÿ™ŸÅÿ±Ÿäÿ∫ ÿßŸÑÿ®ÿ∑ÿßÿ±Ÿäÿ© - ÿßÿ≥ÿ™ŸáŸÑÿßŸÉ ÿ£ŸÇÿµŸâ', 'ÿ™ÿ±ÿ¨ŸÖÿ© ŸÇÿ≥ÿ±Ÿäÿ© - ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÑÿ∫ÿ© ÿπÿ¥Ÿàÿßÿ¶ŸäÿßŸã',
            'ŸÖÿ≠ÿßŸÉŸä ŸÖÿ¥ÿßŸÉŸÑ ÿßŸÑÿ¥ÿ®ŸÉÿ©', 'ŸÑŸÖÿßÿ∞ÿß ŸäÿπŸÖŸÑ CSS ÿßŸÑÿÆÿßÿµ ÿ®Ÿä ÿπŸÑŸâ ÿ≥ÿ∑ÿ≠ ÿßŸÑŸÖŸÉÿ™ÿ® ŸàŸÑŸÉŸÜ ŸÑŸäÿ≥ ÿπŸÑŸâ ÿßŸÑŸáÿßÿ™ŸÅ ÿßŸÑŸÖÿ≠ŸÖŸàŸÑÿü', 'ŸÉŸäŸÅ "ÿßŸÑÿ®ÿ±ŸÜÿßŸÖÿ¨ ÿßŸÑŸÖÿ≥ÿßÿπÿØ ŸÑŸÄ Capacitor ÿ∫Ÿäÿ± ŸÖÿ™ÿßÿ≠"ÿü!', 'ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇ ÿßŸÑÿ∞Ÿä ŸäÿπŸÖŸÑ ÿπŸÑŸâ iOS 15 ŸàŸÑŸÉŸÜ Ÿäÿ™ÿπÿ∑ŸÑ ÿπŸÑŸâ iOS 16...', 'ŸÑŸÖÿßÿ∞ÿß Ÿäÿ±ŸÅÿ∂ ÿ™ÿ∑ÿ®ŸäŸÇ PWA ÿßŸÑÿÆÿßÿµ ÿ®Ÿä ÿßŸÑÿ™ÿ´ÿ®Ÿäÿ™ÿü',
            'Ÿáÿ∞Ÿá ÿßŸÑÿ™ÿ£ÿ´Ÿäÿ±ÿßÿ™ ÿ≠ŸÇŸäŸÇŸäÿ© ŸàŸÑŸÉŸÜŸáÿß ŸÖÿ§ŸÇÿ™ÿ© (10 ÿ´ŸàÿßŸÜŸç ŸÉÿ≠ÿØ ÿ£ŸÇÿµŸâ)', 'ŸÖŸèÿ≠ÿ≥ŸéŸëŸÜ ŸÑŸÄ Capacitor - ÿ®ÿØŸàŸÜ ÿ±ÿ≥ŸàŸÖ ŸÖÿ™ÿ≠ÿ±ŸÉÿ© ŸÖÿ±ÿ¶Ÿäÿ©', 'ŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑÿπÿ±ÿ∂ ÿßŸÑÿ™Ÿàÿ∂Ÿäÿ≠Ÿä ŸÅŸÇÿ∑ (ŸÑÿß ÿ™ÿ≥ÿ™ÿÆÿØŸÖ ÿπŸÑŸâ ÿ¨Ÿáÿßÿ≤ ÿßÿ≠ÿ™ÿ±ÿßŸÅŸä!)'
          ],
          'hi': [
            'RAM ‡§ì‡§µ‡§∞‡§≤‡•ã‡§°', 'CPU ‡§¨‡§∞‡•ç‡§®‡§∞', '‡§´‡•á‡§ï ‡§µ‡•á‡§¨‡§ï‡•à‡§Æ ‡§π‡•à‡§ï', '‡§´‡•á‡§ï ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§°‡•ç‡§∞‡•â‡§™', '‡§≠‡§æ‡§∑‡§æ ‡§µ‡§ø‡§∂‡•ç‡§µ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ', '‡§∏‡§æ‡§á‡§ï‡•á‡§°‡•á‡§≤‡§ø‡§ï ‡§Æ‡•ã‡§°', '‡§¨‡•à‡§ü‡§∞‡•Ä ‡§°‡•ç‡§∞‡•á‡§®', '‡§Ø‡•Ç‡§®‡§ø‡§µ‡§∞‡•ç‡§∏‡§≤ ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶',
            '‡§ê‡§™ ‡§ï‡•ç‡§∞‡•à‡§∂ - ‡§¨‡§°‡§º‡•á ‡§™‡•à‡§Æ‡§æ‡§®‡•á ‡§™‡§∞ ‡§Æ‡•á‡§Æ‡•ã‡§∞‡•Ä ‡§Ü‡§µ‡§Ç‡§ü‡§®', '‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§´‡•ç‡§∞‡•Ä‡§ú - ‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§∞‡•Ç‡§™ ‡§∏‡•á CPU 100%', '‡§´‡§∞‡•ç‡§ú‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§Ö‡§≤‡§∞‡•ç‡§ü', '‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§Æ‡•Ç‡§ï ‡§∏‡§ø‡§Æ‡•Å‡§≤‡•á‡§∂‡§®', '‡§™‡•É‡§∑‡•ç‡§†‡§≠‡•Ç‡§Æ‡§ø ‡§Æ‡•á‡§Ç ‡§≠‡§æ‡§∑‡§æ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§¨‡§¶‡§≤‡§®‡§æ', '‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§∞‡§Ç‡§ó‡•ã‡§Ç ‡§ï‡•ã ‡§ö‡•Å‡§™‡§ö‡§æ‡§™ ‡§¨‡§¶‡§≤‡§®‡§æ', '‡§¨‡•à‡§ü‡§∞‡•Ä ‡§ñ‡§æ‡§≤‡•Ä ‡§ï‡§∞‡§®‡§æ - ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§ñ‡§™‡§§', '‡§ú‡§¨‡§∞‡§¶‡§∏‡•ç‡§§‡•Ä ‡§Ö‡§®‡•Å‡§µ‡§æ‡§¶ - ‡§¨‡•á‡§§‡§∞‡§§‡•Ä‡§¨ ‡§≠‡§æ‡§∑‡§æ ‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§®',
            '‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç ‡§∏‡§ø‡§Æ‡•ç‡§Ø‡•Å‡§≤‡•á‡§ü‡§∞', '‡§Æ‡•á‡§∞‡§æ CSS ‡§°‡•á‡§∏‡•ç‡§ï‡§ü‡•â‡§™ ‡§™‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§≤‡•á‡§ï‡§ø‡§® ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§™‡§∞ ‡§®‡§π‡•Ä‡§Ç?', '‡§ï‡•à‡§∏‡•á "Capacitor ‡§™‡•ç‡§≤‡§ó‡§á‡§® ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à"?!', '‡§Æ‡•á‡§∞‡§æ ‡§ê‡§™ ‡§ú‡•ã iOS 15 ‡§™‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§•‡§æ ‡§≤‡•á‡§ï‡§ø‡§® iOS 16 ‡§™‡§∞ ‡§ï‡•ç‡§∞‡•à‡§∂ ‡§π‡•ã‡§§‡§æ ‡§π‡•à...', '‡§Æ‡•á‡§∞‡§æ PWA ‡§á‡§Ç‡§∏‡•ç‡§ü‡•â‡§≤ ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§á‡§®‡§ï‡§æ‡§∞ ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à?',
            '‡§Ø‡•á ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§π‡•à‡§Ç ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ö‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§π‡•à‡§Ç (‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ 10 ‡§∏‡•á‡§ï‡§Ç‡§°)', 'Capacitor ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§ - ‡§ï‡•ã‡§à ‡§¶‡•É‡§∂‡•ç‡§Ø ‡§è‡§®‡§ø‡§Æ‡•á‡§∂‡§® ‡§®‡§π‡•Ä‡§Ç', '‡§ï‡•á‡§µ‡§≤ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç (‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§™‡§∞ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§® ‡§ï‡§∞‡•á‡§Ç!)'
          ],
          'th': [
            'RAM ‡πÇ‡∏≠‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÇ‡∏´‡∏•‡∏î', 'CPU ‡πÄ‡∏ö‡∏¥‡∏£‡πå‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå', '‡πÅ‡∏Æ‡πá‡∏Å‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°‡∏õ‡∏•‡∏≠‡∏°', '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏•‡∏≠‡∏°', '‡∏ó‡∏±‡∏ß‡∏£‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÇ‡∏•‡∏Å', '‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏ã‡∏Ñ‡∏µ‡πÄ‡∏î‡∏•‡∏¥‡∏Ñ', '‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà', '‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏™‡∏≤‡∏Å‡∏•',
            '‡πÅ‡∏≠‡∏õ‡∏Ç‡πâ‡∏≠‡∏á‡∏Ç‡∏±‡∏î - ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏£‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å', '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á - CPU 100% ‡∏ñ‡∏≤‡∏ß‡∏£', '‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏õ‡∏•‡∏≠‡∏°', '‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÜ', '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á', '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡πÜ', '‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏´‡∏°‡∏î - ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î', '‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°',
            '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢', '‡∏ó‡∏≥‡πÑ‡∏° CSS ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏î‡∏™‡∏Å‡πå‡∏ó‡πá‡∏≠‡∏õ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠?', '‡∏≠‡∏∞‡πÑ‡∏£‡∏ô‡∏∞ "‡∏õ‡∏•‡∏±‡πä‡∏Å‡∏≠‡∏¥‡∏ô Capacitor ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"?!', '‡πÅ‡∏≠‡∏õ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô iOS 15 ‡πÅ‡∏ï‡πà‡∏Ç‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏á‡∏ö‡∏ô iOS 16...', '‡∏ó‡∏≥‡πÑ‡∏° PWA ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á?',
            '‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ï‡πà‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)', '‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö Capacitor - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß', '‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û!)'
          ],
          'ko': [
            'RAM Ïò§Î≤ÑÎ°úÎìú', 'CPU Î≤ÑÎÑà', 'Í∞ÄÏßú ÏõπÏ∫† Ìï¥ÌÇπ', 'Í∞ÄÏßú Ïó∞Í≤∞ ÎÅäÍπÄ', 'Ïñ∏Ïñ¥ ÏÑ∏Í≥Ñ Ïó¨Ìñâ', 'ÏÇ¨Ïù¥ÌÇ§Îç∏Î¶≠ Î™®Îìú', 'Î∞∞ÌÑ∞Î¶¨ ÎìúÎ†àÏù∏', 'Ïú†ÎãàÎ≤ÑÏÖú Î≤àÏó≠',
            'Ïï± Ï∂©Îèå - ÎåÄÎüâ Î©îÎ™®Î¶¨ Ìï†Îãπ', 'Í∏∞Í∏∞ ÎèôÍ≤∞ - ÏòÅÍµ¨ CPU 100%', 'Í∞ÄÏßú Î≥¥Ïïà Í≤ΩÍ≥†', 'ÎÑ§Ìä∏ÏõåÌÅ¨ Î¨∏Ï†úÎ•º Ï°∞Ïö©Ìûà ÏãúÎÆ¨Î†àÏù¥ÏÖò', 'Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Ïñ∏Ïñ¥ ÏÑ§Ï†ï Î≥ÄÍ≤Ω', 'ÏãúÏä§ÌÖú ÏÉâÏÉÅÏùÑ Ï°∞Ïö©Ìûà Î≥ÄÍ≤Ω', 'Î∞∞ÌÑ∞Î¶¨ ÏÜåÎ™® - ÏµúÎåÄ ÏÜåÎπÑ', 'Í∞ïÏ†ú Î≤àÏó≠ - Î¨¥ÏûëÏúÑ Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω',
            'ÎÑ§Ìä∏ÏõåÌÅ¨ Î¨∏Ï†ú ÏãúÎÆ¨Î†àÏù¥ÌÑ∞', 'ÎÇ¥ CSSÎäî Îç∞Ïä§ÌÅ¨ÌÜ±ÏóêÏÑúÎäî ÏûëÎèôÌïòÏßÄÎßå Î™®Î∞îÏùºÏóêÏÑúÎäî ÏûëÎèôÌïòÏßÄ ÏïäÎäî Ïù¥Ïú†Îäî Î¨¥ÏóáÏûÖÎãàÍπå?', '"Capacitor ÌîåÎü¨Í∑∏Ïù∏ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§"Îäî Î¨¥ÏóáÏûÖÎãàÍπå?!', 'iOS 15ÏóêÏÑúÎäî ÏûëÎèôÌñàÏßÄÎßå iOS 16ÏóêÏÑúÎäî Ï∂©ÎèåÌïòÎäî ÎÇ¥ Ïï±...', 'ÎÇ¥ PWAÍ∞Ä ÏÑ§ÏπòÎ•º Í±∞Î∂ÄÌïòÎäî Ïù¥Ïú†Îäî Î¨¥ÏóáÏûÖÎãàÍπå?',
            'Ïù¥ Ìö®Í≥ºÎäî Ïã§Ï†úÏù¥ÏßÄÎßå ÏùºÏãúÏ†ÅÏûÖÎãàÎã§(ÏµúÎåÄ 10Ï¥à)', 'CapacitorÏóê ÏµúÏ†ÅÌôî - ÏãúÍ∞ÅÏ†Å Ïï†ÎãàÎ©îÏù¥ÏÖò ÏóÜÏùå', 'Îç∞Î™®Ïö©ÏúºÎ°úÎßå ÏÇ¨Ïö©(Ï†ÑÎ¨∏ Í∏∞Í∏∞ÏóêÏÑú ÏÇ¨Ïö©ÌïòÏßÄ ÎßàÏÑ∏Ïöî!)'
          ]
        };
        
        const changeLanguageRandomly = () => {
          const randomLang = languages[Math.floor(Math.random() * languages.length)];
          
          // Change la langue et la direction du document
          document.documentElement.lang = randomLang.code;
          document.documentElement.dir = randomLang.dir;
          
          // Change tous les textes de la page
          const langTexts = translatedTexts[randomLang.code] || translatedTexts['zh-CN'];
          
          originalTexts.forEach((textInfo, index) => {
            if (index < langTexts.length) {
              textInfo.element.textContent = langTexts[index];
            }
          });
          
          // Continue √† changer ind√©finiment toutes les 2 secondes
          setTimeout(changeLanguageRandomly, 2000);
        };
        
        // D√©marre le changement de langue
        changeLanguageRandomly();
      }
    }
  ];

  const triggerProblem = (problem: typeof webProblems[0]) => {
    setActiveProblem(problem.name);
    
    try {
      problem.action();
    } catch (error) {
      console.error(`Erreur lors de l'ex√©cution de ${problem.name}:`, error);
    }
    
    setTimeout(() => setActiveProblem(null), 10000);
  };

  return (
    <div className={`probleme-container ${isShaking ? 'shake' : ''}`}>
      <h1 className="title">ü§Ø PROBL√àMES ü§Ø</h1>
      
      <div className="philosophical">
        <p>Nous avons quelques probl√®mes √† vous propos√© :</p>
        <ul>
  <li>Envie de bombarder ton CPU pour le faire chauffer comme un micro-ondes ? Facile.</li>
  <li>Remplis ta RAM jusqu‚Äô√† ce que ton ordi pleure... ou red√©marre tout seul.</li>
  <li>Chiffre ton disque dur sans sauvegarde, juste pour voir ce que √ßa fait.</li>
  <li>Change al√©atoirement les mots de passe de tes r√©seaux sociaux ‚Äî m√™me toi tu ne les conna√Ætras plus.</li>
  <li>Passe la langue de ton syst√®me en hongrois, puis en cor√©en, sans traduction.</li>
</ul>

      </div>
      
      <div className="simulator">
        <p>Simulateur de catastrophes web (effets en arri√®re-plan uniquement) :</p>
        <div className="problem-grid">
          {webProblems.map((problem, index) => (
            <button
              key={index}
              className={`problem-btn ${
                activeProblem === problem.name ? 'active' : ''
              }`}
              onClick={() => triggerProblem(problem)}
              disabled={activeProblem !== null}
            >
              <span className="problem-name">{problem.name}</span>
              <span className="problem-desc">{problem.description}</span>
              {activeProblem === problem.name && (
                <span className="problem-status">En cours... (10s)</span>
              )}
            </button>
          ))}
        </div>
      </div>
      
      <div className="disclaimer">
        <p>‚ö†Ô∏è Ces effets sont r√©els mais temporaires (10 secondes max).</p>
        <p>Optimis√© pour Capacitor - Pas d'animations visuelles</p>
        <p>√Ä n'utiliser que pour d√©monstration (pas sur un device professionnel !)</p>
      </div>
    </div>
  );
};

export default ProblemeWeb;